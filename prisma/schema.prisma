generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id         String     @id @default(uuid())
  title      String
  totalPrice Float?
  price      Float
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  quantity   Int
  units      String?
  comment    String?
  createdAt  DateTime   @default(now())
  buy        Buy[]
  contract   Contract[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  image    String?   @default(" ")
  products Product[]
}

model User {
  id               String         @id @default(uuid())
  fname            String
  lname            String
  username         String         @unique
  password         String
  phone            String
  balance          Float          @default(0)
  role             Role
  isActive         Boolean        @default(true)
  pushSubscription String?        @default("no-subscription")
  partners         Partners[]
  buy              Buy[]
  contract         Contract[]
  salary           Salary[]
  Payment          Payment[]
  Notification     Notification[]
}

enum Role {
  admin
  owner
}

model Partners {
  id       String     @id @default(uuid())
  fullname String
  phone    String[]
  balance  Float
  adress   String
  location Json?
  pin      Boolean    @default(false) 
  role     Partner
  isActive Boolean    @default(true)
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  buy      Buy[]
  contract Contract[]
  Payment  Payment[]
}

enum Partner {
  seller
  customer
}

model Buy {
  id        String   @id @default(uuid())
  userId    String
  partnerId String
  productId String
  quantity  Int
  buyPrice  Float
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  partner   Partners @relation(fields: [partnerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Contract {
  id          String   @id @default(uuid())
  userId      String
  partnerId   String
  productId   String
  quantity    Int
  sellPrice   Float
  totalAmount Float    @default(0)
  time        Int
  return      Return[]
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  partner     Partners @relation(fields: [partnerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  Debt        Debt[]
}

model Return {
  id         String   @id @default(uuid())
  reason     String
  contractId String
  isNew      Boolean
  createdAt  DateTime @default(now())
  contract   Contract @relation(fields: [contractId], references: [id])
}

model Salary {
  id        String   @id @default(uuid())
  amaunt    Float
  comment   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  userId      String
  partnerId   String
  debtId      String?
  comment     String?
  amaunt      Float
  paymentType Pmnt
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  partner     Partners @relation(fields: [partnerId], references: [id])
  debt        Debt?    @relation(fields: [debtId], references: [id])
}

enum Pmnt {
  in
  out
}

model Debt {
  id         String    @id @default(uuid())
  contractId String
  total      Float
  time       Int
  isClosed   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  contract   Contract  @relation(fields: [contractId], references: [id])
  Payment    Payment[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Upload {
  id        String   @id @default(uuid())
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
}
